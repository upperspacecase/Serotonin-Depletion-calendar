import React, { useState } from 'react';
import { Brain, Info, Calendar } from 'lucide-react';
import { Card, CardHeader, CardTitle, CardContent } from '@/components/ui/card';
import {
  Tooltip,
  TooltipContent,
  TooltipProvider,
  TooltipTrigger,
} from "@/components/ui/tooltip";

const DAYS_OF_WEEK = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'];
const DAYS_OF_WEEK_SHORT = ['S', 'M', 'T', 'W', 'T', 'F', 'S'];

const SerotoninCalendar = () => {
  const [events, setEvents] = useState({});
  const [isYearView, setIsYearView] = useState(true);
  const [currentDate, setCurrentDate] = useState(new Date());

  const getMonthsToDisplay = () => {
    if (isYearView) {
      const months = [];
      const startOfYear = new Date(currentDate.getFullYear(), 0, 1);
      for (let i = 0; i < 12; i++) {
        months.push(new Date(startOfYear.getFullYear(), i, 1));
      }
      return months;
    }
    return [currentDate];
  };

  const navigateMonth = (offset) => {
    setCurrentDate(prev => new Date(prev.getFullYear(), prev.getMonth() + offset, 1));
  };

  const getDaysInMonth = (date) => {
    return new Date(date.getFullYear(), date.getMonth() + 1, 0).getDate();
  };

  const getFirstDayOfMonth = (date) => {
    return new Date(date.getFullYear(), date.getMonth(), 1).getDay();
  };

  const calculateRecoveryLevel = (date) => {
    const dateStr = date.toISOString().split('T')[0];
    let recoveryScore = 100;
    
    Object.entries(events).forEach(([eventDate, isDepletion]) => {
      if (!isDepletion) return;
      
      const eventDateObj = new Date(eventDate);
      const diffDays = Math.floor((date - eventDateObj) / (1000 * 60 * 60 * 24));
      
      if (diffDays >= 0 && diffDays <= 90) {
        const baseRecovery = Math.min(1, diffDays / 90);
        const recoveryProgress = Math.pow(baseRecovery, 2);
        const impact = 1 - recoveryProgress;
        recoveryScore *= (1 - impact * 0.7);
      }
    });

    return Math.min(100, Math.max(0, recoveryScore));
  };

  const getColorForLevel = (level) => {
    if (level >= 90) return 'bg-green-500';
    if (level >= 70) return 'bg-green-400';
    if (level >= 50) return 'bg-yellow-400';
    if (level >= 30) return 'bg-orange-400';
    return 'bg-red-400';
  };

  const handleDateClick = (date) => {
    const dateStr = date.toISOString().split('T')[0];
    setEvents(prev => ({
      ...prev,
      [dateStr]: !prev[dateStr]
    }));
  };

  const renderMonth = (monthDate) => {
    const daysInMonth = getDaysInMonth(monthDate);
    const firstDayOfMonth = getFirstDayOfMonth(monthDate);
    const days = [];

    // Empty cells
    for (let i = 0; i < firstDayOfMonth; i++) {
      days.push(<div key={`empty-${i}`} className={isYearView ? "h-8" : "h-24"} />);
    }

    // Days of the month
    for (let day = 1; day <= daysInMonth; day++) {
      const date = new Date(monthDate.getFullYear(), monthDate.getMonth(), day);
      const dateStr = date.toISOString().split('T')[0];
      const recoveryLevel = calculateRecoveryLevel(date);
      const isDepletionDay = events[dateStr];
      const isToday = new Date().toDateString() === date.toDateString();

      days.push(
        <TooltipProvider key={dateStr}>
          <Tooltip>
            <TooltipTrigger>
              <div
                onClick={() => handleDateClick(date)}
                className={`${isYearView ? 'h-8' : 'h-24'} flex flex-col items-center 
                  ${isYearView ? 'justify-center' : 'justify-start pt-1'} p-1
                  cursor-pointer transition-colors ${getColorForLevel(recoveryLevel)}
                  hover:opacity-80 rounded relative
                  ${isToday ? 'ring-1 ring-blue-500' : ''}`}
              >
                <span className={`${isYearView ? 'text-xs' : 'text-lg'} 
                  ${recoveryLevel < 50 ? 'text-white' : ''}`}>
                  {day}
                </span>
                {!isYearView && (
                  <span className="text-xs mt-1">
                    {Math.round(recoveryLevel)}%
                  </span>
                )}
                {isDepletionDay && (
                  <div className={`absolute top-0 right-0 
                    ${isYearView ? 'w-1.5 h-1.5' : 'w-2 h-2'} 
                    bg-red-600 rounded-full`} />
                )}
              </div>
            </TooltipTrigger>
            <TooltipContent>
              <p className="font-medium">{date.toLocaleDateString()}</p>
              <p>Recovery Level: {Math.round(recoveryLevel)}%</p>
              {isDepletionDay && <p>Depletion Event Marked</p>}
            </TooltipContent>
          </Tooltip>
        </TooltipProvider>
      );
    }

    return (
      <div key={monthDate.toISOString()} className="space-y-1">
        <h3 className={`font-medium ${isYearView ? 'text-sm' : 'text-lg'}`}>
          {monthDate.toLocaleDateString('default', { 
            month: isYearView ? 'short' : 'long',
            year: isYearView && monthDate.getMonth() === 0 ? 'numeric' : undefined
          })}
        </h3>
        <div className="grid grid-cols-7 gap-px mb-1">
          {(isYearView ? DAYS_OF_WEEK_SHORT : DAYS_OF_WEEK).map(day => (
            <div key={day} className={`text-center ${isYearView ? 'text-xs' : 'text-sm'} 
              font-medium text-gray-600`}>
              {day}
            </div>
          ))}
        </div>
        <div className="grid grid-cols-7 gap-px">
          {days}
        </div>
      </div>
    );
  };

  return (
    <Card className="max-w-6xl mx-auto p-4">
      <CardHeader>
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center gap-4">
            <CardTitle className="flex items-center gap-2">
              <Brain className="h-6 w-6" />
              Serotonin Recovery Calendar
            </CardTitle>
            <button
              onClick={() => setIsYearView(!isYearView)}
              className="flex items-center gap-2 px-3 py-1.5 bg-gray-100 rounded-lg 
                hover:bg-gray-200 text-sm font-medium"
            >
              <Calendar className="h-4 w-4" />
              {isYearView ? 'Switch to Month' : 'Switch to Year'}
            </button>
          </div>
          {!isYearView && (
            <div className="flex items-center gap-2">
              <button
                onClick={() => navigateMonth(-1)}
                className="px-3 py-1.5 bg-gray-100 rounded-lg hover:bg-gray-200 text-sm"
              >
                Previous
              </button>
              <button
                onClick={() => navigateMonth(1)}
                className="px-3 py-1.5 bg-gray-100 rounded-lg hover:bg-gray-200 text-sm"
              >
                Next
              </button>
            </div>
          )}
        </div>
      </CardHeader>
      <CardContent>
        <div className={`grid ${isYearView ? 'grid-cols-3 md:grid-cols-4' : 'grid-cols-1'} gap-4`}>
          {getMonthsToDisplay().map(month => renderMonth(month))}
        </div>

        <div className="mt-6 grid grid-cols-1 md:grid-cols-3 gap-4">
          <div className="space-y-2">
            <h3 className="font-medium">Recovery Levels</h3>
            <div className="flex flex-col gap-1">
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-green-500 rounded"></div>
                <span className="text-sm">90-100% Optimal</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-green-400 rounded"></div>
                <span className="text-sm">70-89% Good</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-yellow-400 rounded"></div>
                <span className="text-sm">50-69% Moderate</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-orange-400 rounded"></div>
                <span className="text-sm">30-49% Low</span>
              </div>
              <div className="flex items-center gap-2">
                <div className="w-4 h-4 bg-red-400 rounded"></div>
                <span className="text-sm">0-29% Very Low</span>
              </div>
            </div>
          </div>

          <div className="space-y-2">
            <h3 className="font-medium">How to Use</h3>
            <ul className="text-sm space-y-1">
              <li>• Click any day to mark a depletion event</li>
              <li>• Red dot shows depletion day</li>
              <li>• Colors show recovery progress</li>
              <li>• Blue ring shows today's date</li>
              <li>• Toggle views using the button above</li>
            </ul>
          </div>

          <div className="space-y-2">
            <h3 className="font-medium">Important Notes</h3>
            <ul className="text-sm space-y-1">
              <li>• Recovery requires 90+ days</li>
              <li>• Progress is gradual and non-linear</li>
              <li>• Consult healthcare providers</li>
              <li>• Stay patient with the process</li>
            </ul>
          </div>
        </div>
      </CardContent>
    </Card>
  );
};

export default SerotoninCalendar;
